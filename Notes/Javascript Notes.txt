[Links]
https://www.w3schools.com/js/default.asp
https://javascript.info
https://www.linkedin.com/learning/topics/web-development?sortBy=RECENCY
https://scotch.io
https://developer.mozilla.org/en-US/docs/Web/JavaScript

[Things To Look Into]
https://github.com/meteor/meteor
https://github.com/jscrambler/jscrambler - Client-side protection (?).

[General Concepts]
In computer science, a programming language is said to have first-class functions if it treats functions as first-class citizens. Specifically, this means the language supports passing functions as arguments to other functions, returning them as the values from other functions, and assigning them to variables or storing them in data structures.[1]

By Value - Original not changed.  Arguments/parameters only available to that function, etc.
By Reference - Original changed.

[Tools]
	GRUNT: Automates compiling multiple .js files into one big JS file, using a GRUNTFILE.

	Browserify: Allows you to use the REQUIRE statement in browser files, so you can use the same .js files as in your node projects in the browser.

	NPM: Installs dependencies for NodeJS projects.  Can also compile and minify files, like at: https://github.com/mrdoob/three.js/wiki/Build-instructions
	
	ROLLUP: Compiles multiple .js files into one. See: https://medium.com/@kelin2025/so-you-wanna-use-es6-modules-714f48b3a953
	
	BABEL: Like ROLLUP, but less complicated and more simple. See: https://medium.com/@kelin2025/so-you-wanna-use-es6-modules-714f48b3a953

[Strict Mode]
	- Add "use strict"; to the top of your javascript file, like at: https://www.w3schools.com/lib/w3.js
[Declarations]
	Block Scope - Variables in a block (anything within { } brackets) belong to the function the variable is in.  JavaScript prior to ECMAScript2015 DOES NOT HAVE block scope. Variables declared within a block can effect things outside of the block. This changed in 2015 when the Let Statement was introduced [35].
	Function Scope - Variable defined within function is available to entire function [34].
	Global scope/variable - Variable available from all scripts and functions.  "Global variables are in fact properties of the global object. In web pages, the global object is window, so you can set and access global variables using the window.variable syntax" [40][41].
	Lexical Scope - Scope of an inner function contains the scope of parent/outer function [34].
	Local scope/varible - Variable declared within function, available only to that function.
	Script scoped - Applies to entire script (you may hear/read this in some places).
	
	Ways of Declaring variables [25]:
	- var. Scope of a variable defined with var is function scope or if declared outside of any function, global (scope is locked to wherever you include it) [37].
	- By assigning values. For example, "x = 42;". This always declares a global variable. It generates a strict JavaScript warning. You shouldn't use this.
	- let. NOT HOISTED like var is. Used to declare a block scope local variable. When used inside a block, scope is limited to that block/statement [22].
	- constants - cannot be overwritten ONCE THEY ARE CREATED, or have the same name as varables of functions in the same scope.  However, constants created as objects and arrays can have their properties modified.  They are block-scoped like the let statement.
	
		var a = 0, b = 0;
		var a = 0;
		
		Variables declared outside function becomes global:
		var carName = "Volvo";
		// code here can use carName
		function myFunction() {
		// code here can also use carName 
		}
		
		Assigning value to non-declared variable automatically makes it global [42].  Example: https://www.w3schools.com/code/tryit.asp?filename=FUH5XVYEIBN6
		carName = "Volvo";
		myFunction();
		function myFunction() {
		// code here can use carName as a global variable
		console.log(carName);
		document.getElementById("demo").innerHTML = "I can display " + carName;	
		}
		
		Initialize several variables:
		var x = 0;
		function f() {
			var x = y = 1; // x is declared locally. y is not!
		}
		f();
		console.log(x, y); // Throws a ReferenceError in strict mode (y is not defined). 0, 1 otherwise. 
		// In non-strict mode: x is the global one as expected, y is leaked outside of the function, though!

		const MY_FAV = 7;
		const MY_OBJECT = {"key": "value"};
		
		const settings = {
			baseUrl: "https://example.com"
		};
		settings.baseUrl = "https://evil.example.com"; // This is valid
		
		const numbers = [1, 2, 3];
		numbers.push(4);  // This is also valid
		numbers.shift();  // This is also valid
		
		Let Statement (kind of like var, but only locks scope to that function):
			let x = 1;
			if (x === 1) {
				let x = 2;
				console.log(x); // expected output: 2
			}
			console.log(x); // expected output: 1
	
		Let Block: 
			var x = 5;
			var y = 0;
			let (x = x+10, y = 12) {
				console.log(x+y); // 27
			}
			console.log(x + y); // 5
	
		Let Expression:
			var a = 5;
			let(a = 6) console.log(a); // 6
			console.log(a); // 5
	
	Hoisting:
		var declarations, wherever they occur, are processed before any code is executed. This is called hoisting [43].
	
		Variables and functions are hoisted to the top transparently, but ONLY a part of them are (see var and let, in "Declarations").  This is NOT an advantage, and is a hassle, since, as Mozilla writes, "However, variables that are hoisted return a value of undefined. So even if you declare and initialize after you use or refer to this variable, it still returns undefined" [39].  Also, let and const are NOT HOISTED [36].
		
		Declaration IS HOISTED (ex: "var x"), but not any expressions with it. Example: In "var x = 5", only the "var x" part is technically hoisted.  Also, when trying to access it, the variable will give an error of undefined since it's just empty (if you used the let statement you would get a reference error because it hasn't even been defined, since it wasn't hoisted like the var declaration was) [37].
		
		Why care worry about hoisting?  The previous paragraph is why.  Because if you declare variables later (with var, but not let and const), instead of at the top of your script of function, part of the variable expression ("var x = 5") may actually be hoisted to the top, and the variable will return undefined, since it's empty but declared.  To avoid this, declare variables at the beginning of the script and at the beginning of functions, or use let and const instead.
		
		Example 1:
		console.log(c); // undefined, due to hoisting
		var c = 2;

		Example 2:
		console.log(b); // ReferenceError: b is not defined
		let c = 2;
		
	Important Notes on Declarations:
	- Global variables are not created automatically in "Strict Mode" [42].
	- Declaring variables outside the scope of a top-level function are global [42].  
	- Some people will say declaring variables without using var will also make them become global, but this is just due to the effect in the previous line [https://stackoverflow.com/questions/6888570/declaring-variables-without-var-keyword].
	- Assigning value to variable that hasn't been declared makes it automatically become a global variable, unless in Strict Mode (since variables are not automatically created in strict mode) [42].
	- ONLY function declarations are hoisted -- hence immediately invoked function expressions, which wouldn't work right if they were hoisted to the top [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function].
	- Let and Const are not hoisted! [https://www.w3schools.com/js/js_hoisting.asp].
	
	Tips:
	- Use Let to avoid polluting the "global namespace", and avoid errors with included scripts, functions, modules, etc.
	- Access global variables using window.variable syntax.
	- Do NOT create global variables unless you intend to. Your global variables (or functions) can overwrite window variables (or functions) [https://www.w3schools.com/js/js_scope.asp]. Any function, including the window object, can overwrite your global variables and functions.
	- In web pages, but not NodeJS, the global object is "window". In node, the global object's called "global".
	- May encounter errors in switch statements because there is only one underlying block (?).
	
[Functions]
	Three basic ways to define: expression, declaration, and using constructor.

	Anonymous Function: function(a, b){return a+b;}

	Anonymous Function Assigned to Variable (Function Literal): var abc = function(a, b){return a+b;} [7]

	Function Constructor (new keyword):
		- Example: var sum = new Function('a', 'b', 'return a + b');
		- Basically a function for creating functions, with the third parameter being the function body.
		- Don't confuse with new operator for instantiating objects.
		- Suffers from security and performance issues, like eval.
		- See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function
		
	Function Declaration (aka. Function Statement):
		- Example: function abc() { var x = 1 }
		- Require a name.
		- HOISTED.
		- More desireable because they're hoisted (function expressions are not). [8]
	
	Function Expression:
		- Example: var abc = function() { var x = 1 }
		- Can be used as IIFE.
		- Can be anonymous.
		- Can be named, but optional.
		- NOT hoisted.
		
	Named Function Expression [30]: 
		Example: 
		var math = { 'factorial': function factorial(n) {
		}};
		
	Immediately Invoked Function Expressions (IIFE):
		Example: (function() { alert('Hello World'); })();
		- Function is wrapped in parenthesis (to make it an expression), so that it's executed without invoking/calling it.
		- Purpose of IIFE is so variables cannot be accessed from outside of it (assigning the function to a variable will just display the functions result (not the function itself).
		- Also called: Self/immediately Invoking/Executing (Anonymous) Function Expression(s).
		
	Get Syntax: Binds an object property to a function that will be called when that property is looked up. [13] [16]
		- As property of object. [13]
		- Using Object.defineProperty(), to append a getter to an existing object later at any time, . [13]
		- __defineGetter__() - (DEPRECATED) [15]

	Set Syntax: binds an object property to a function to be called when there is an attempt to set that property. [14]	
	
	Native Function Properties:
		- .arguments [19], .caller, .length, .name, .displayName, .prototype
	
	Native Function Methods:
		- .apply [12], .bind, .call [11], .toSource, .toString, .isGenerator

	Arrow Functions [17]: 
		- Are shorter, and always anonymous.
		- Best suited for non-method functions and they can not be used as constructors (new keyword).
		- "this" is lexical (strict mode rules with regard to this are ignored).
		- Two Types of Syntax:
			- var func = x => x * x;                  // concise syntax, implied "return"
			- var func = (x, y) => { return x + y; }; // with block body, explicit "return" needed
	
	Handler Functions and Closures:
		- https://www.sitepoint.com/function-expressions-vs-declarations/
	
	Generator Functions (Functions with an asterix *): [21]
		- Generators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances. Calling a generator function does not execute its body immediately; an iterator object for the function is returned instead. When the iterator's next() method is called, the generator function's body is executed until the first yield expression, which specifies the value to be returned from the iterator or, with yield*, delegates to another generator function. The next() method returns an object with a value property containing the yielded value and a done property which indicates whether the generator has yielded its last value as a boolean. Calling the next() method with an argument will resume the generator function execution, replacing the yield statement where execution was paused with the argument from next().
		- The yield() keyword pauses and resumes generator functions.
		- The yield* expression delegates to another generator or iterable object.
	
	Function Arguments/Parameters:
		- A JavaScript function does not perform any checking on parameter values (arguments), number of parameters, or type of parameters. [27]
		- If a function is called with missing arguments (less than declared), the missing values are set to undefined. [27]
		- If a function is provided arguments it doesn't need (those not declared), use the arguments object to access them.  Why would you want to?  No idea. See: https://www.w3schools.com/js/tryit.asp?filename=tryjs_function_arguments [27].
		- JavaScript arguments are passed by value.  Changes to arguments are not visible (reflected) outside the function. [27]
		- Objects will behave like they are passed *by reference* (since they are values, even though I don't understand this, then). If a function changes an object property, it changes the original value. Changes to object properties are visible/reflected outside the function. [27]
		
	Rest Parameters (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters):
		- Are the three dots found before function parameters.
		- Allow indefinite number of arguments to a function. [18]
		
	Function Notes:
		- In JavaScript every function is actually a Function object. [5]
		- Function names can also pollute the global namespace and interfere with other global functions and variables.
		- Functions have properties and methods, just like objects.
		- .arguments is deprecated, and doesn't work in Strict Mode [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments].  Use arguments variable instead of the .arguments property [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments].
		- Functions created with the New keyword do not form a closure. [6]
		- Global function methods can be created/added using Function.prototype. (Example: Function.prototype.construct = function(args){};) [12]
		- Functions are the only thing in JavaScript that create a new scope. [26]
		- A function defined as the property of an object is called a method. [28]
		- A function designed to create new objects is called a constructor. [28]

[Objects]
	Define/create objects with functions. Example:
	function Car(make, model, year) {
		this.make = make;
		this.model = model;
		this.year = year;
	}
	
	"new" Operator:
			- Is a function that instantiates new instance of object previously defined.
			- Don't confuse with new operator for functions, etc.
			- Example: var mycar = new Car('Eagle', 'Talon TSi', 1993);
			- Without new operator, constructor function, new Car(), will be invoked as normal function.
			- [See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new]
	
	Prototype:
		- Allows you to add new properties and functions/methods to object constructors [https://www.w3schools.com/js/js_object_prototypes.asp].
		- Example (new property): Person.prototype.nationality = "English";
		- Example (new function/method): Person.prototype.name = function() { return this.firstName + " " + this.lastName; };
	
	Object Notes:
		- Object properties can also be other objects and functions [44]. See reference for example.
		- Property of an object that is a function is called a method.
		- Arrays and functions are technically objects, not primatives.
		- Javascript DOES NOT support associative arrays (this is what objects are meant for).
		- Arrays use numbered indexes.  Objects use named indexes.
		
[Literals]

[Arrays]
	Example:
	var points = [40, 100, 1, 5, 25, 10];          // Good
	var points = new Array(40, 100, 1, 5, 25, 10); // Bad
	
[Modules & Code Patterns]
	Links:
	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export

	Folding Pattern: https://intrepidis.blogspot.co.uk/2013/04/javascript-folding-pattern.html
	Module Pattern (very common): http://metaduck.com/08-module-pattern-inheritance.html

	Modules are just objects written and meant to be reusable [https://medium.freecodecamp.org/javascript-modules-a-beginner-s-guide-783f7d7a5fcc].

	Strict mode is turned on in modules by default: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode
	
	"Though JavaScript provides no actual module construct yet, objects can be used to create publicly accessible subnamespaces, and functions can be used to create an isolated, private namespace inside of a module." [26]

[Classes]
https://stackoverflow.com/questions/1595611/how-to-properly-create-a-custom-object-in-javascript

[Global Properties]
Infinity
	- Infinity is a numeric value that represents positive infinity.
	- -Infinity is a numeric value that represents negative infinity.
	- Infinity is displayed when a number exceeds the upper limit of the floating point numbers, which is 1.797693134862315E+308.
	- -Infinity is displayed when a number exceeds the lower limit of the floating point numbers, which is -1.797693134862316E+308
		
[Global Functions]
	Eval() [23]
	- If the argument is an expression, eval() evaluates the expression. If the argument is one or more JavaScript statements, eval() executes the statements.	
		
	Number() [24]
	- The Number() function converts the object argument to a number that represents the object's value.
	- If the value cannot be converted to a legal number, NaN is returned.
	- If the parameter is a Date object, the Number() function returns the number of milliseconds since midnight January 1, 1970 UTC.
	
[Gotchas and Technicalities]
	- Only hoists declarations, not initializations or expressions.
	- https://stackoverflow.com/questions/17546953/cant-access-object-property-even-though-it-exists-returns-undefined
	- http://www.w3schools.com/js/js_mistakes.asp
	- https://stackoverflow.com/questions/7064673/is-return-from-constructor-necessary-when-creating-object-with-new
	- Commas are NOT operators, but can be used as part of a declaration statement to declare multiple variables per line [32]:
		Example: var a = 1, b = 2;
		But NOT: var a = 1, var b = 2;
	- Semicolons ARE optional.  Only need to worry about including semicolors is if there is an *parenthesis before other characters, first on a line. [33].  Semicolons "are not statement terminators but statement separators" [38].
	- Parenthesis CANNOT contain statements, so anything between them is treated as an expression.  This is what creates immediately-invoked-function-expressions [30].
	
[Tips and Tricks / Other]
	- console.table(animals); // Outputs table of key-value pairs.
	- 
[Things you May See, and What They Are]	
	- define(['param1', 'param2'], function() {}); https://stackoverflow.com/questions/16950560/what-is-define-function-in-javascript

	- const [add, sub, mul,div] = bulkMakeFunctions(
    "function(a,b){return a+b}","function(a,b){return a-b}","function(a,b){return a*b}","function(a,b){return a/b}" ); https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function and https://www.w3schools.com/code/tryit.asp?filename=FUG5SIWK52GH

	- const foo = something() || defaultValue

[Frameworks]	
http://blazejs.org/

[JQuery Dissection]
https://scotch.io/courses/jquery-for-total-noobs-volume-ii-jquery-is-so-easy-course/an-example-and-dissecting-its-parts-understand-what-it-is-doing
https://stackoverflow.com/questions/4754560/help-understanding-jquerys-jquery-fn-init-why-is-init-in-fn
https://elegantcode.com/2009/06/15/dissecting-jquery-text/

Jquery is a LIBRARY [45].
	
[Things to be Aware Of]
- Unobtrusive_JavaScript

[Questions/Misc.]
Why would you use this guy's "alternative" build process at https://discourse.threejs.org/t/rollup-build-setup-to-import-glsl-files-and-three-js-examples/93/3 instead of the one at: https://github.com/mrdoob/three.js/wiki/Build-instructions ?

Why is function a parameter in define function? https://github.com/jquery/jquery/blob/master/src/core.js

"The scope rules for constants are the same as those for let block-scope variables. If the const keyword is omitted, the identifier is assumed to represent a variable."
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types (It should say "if the keyword is omitted").

"Invoking the Function constructor as a function (without using the new operator) has the same effect as invoking it as a constructor." [5]

Why no return statement when using new keyword?  https://stackoverflow.com/questions/5958417/javascript-function-and-object

"So what does it take to make this code runnable in the browser context, too? Mocha uses Browserify to build an additional file that can run in the browser context. The build process wraps the code in an IIFE and provides an object named global."
https://www.contentful.com/blog/2017/01/17/the-global-object-in-javascript/

[Answers]
Which version of Javascript does your browser use? https://en.wikipedia.org/wiki/JavaScript#Version_history


[References]
1. https://en.wikipedia.org/wiki/First-class_function
2. https://en.wikipedia.org/wiki/JavaScript
3. https://en.wikipedia.org/wiki/Anonymous_function
4. https://en.wikipedia.org/wiki/Prototype-based_programming
5. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function
6. http://www.bennadel.com/blog/1909-javascript-function-constructor-does-not-create-a-closure.htm
7. https://stackoverflow.com/questions/12314905/exact-meaning-of-function-literal-in-javascript
8. https://stackoverflow.com/questions/336859/javascript-function-declaration-syntax-var-fn-function-vs-function-fn
9. https://en.wikipedia.org/wiki/Literal_(computer_programming)
10. https://en.wikipedia.org/wiki/Unobtrusive_JavaScript
11. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call
12. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply
13. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get
14. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set
15. https://stackoverflow.com/questions/812961/javascript-getters-and-setters-for-dummies
16. http://javascriptplayground.com/blog/2013/12/es5-getters-setters/
17. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions
18. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters
19. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments
20. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters
21. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*
22. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let
23. http://www.w3schools.com/jsref/jsref_eval.asp
24. http://www.w3schools.com/jsref/jsref_number.asp
25. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_Types
26. http://eloquentjavascript.net/10_modules.html
27. http://www.w3schools.com/js/js_function_parameters.asp
28. http://www.w3schools.com/js/js_function_definition.asp
29. http://www.2ality.com/2012/09/expressions-vs-statements.html
30. https://en.wikipedia.org/wiki/Immediately-invoked_function_expression
31. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function
32.	https://stackoverflow.com/questions/15485735/use-of-commas-versus-semicolons-in-javascript
33. https://mislav.net/2010/05/semicolons/
34. https://pierrespring.com/2010/05/11/function-scope-and-lexical-scoping/
35. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#Block_statement
36. https://www.w3schools.com/js/js_hoisting.asp
37. https://www.jstips.co/en/javascript/keyword-var-vs-let/
38. https://stackoverflow.com/questions/444080/do-you-recommend-using-semicolons-after-every-statement-in-javascript
39. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Variable_hoisting
40. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Global_variables
41. https://stackoverflow.com/questions/3244361/can-i-access-variables-from-another-file
42. https://www.w3schools.com/js/js_scope.asp
43. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var
44. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new#Object_property_that_is_itself_another_object
45. https://stackoverflow.com/questions/7062775/is-jquery-a-javascript-library-or-framework