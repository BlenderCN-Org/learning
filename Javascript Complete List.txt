Introduction from Wikipedia: 
"JavaScript is a high-level, dynamic, untyped, and interpreted programming language. It has been standardized in the ECMAScript language specification. Alongside HTML and CSS, it is one of the three core technologies of World Wide Web content production; the majority of websites employ it and it is supported by all modern Web browsers without plug-ins. JavaScript is prototype-based with first-class functions, making it a multi-paradigm language, supporting object-oriented, imperative, and functional programming styles. It has an API for working with text, arrays, dates and regular expressions, but does not include any I/O, such as networking, storage, or graphics facilities, relying for these upon the host environment in which it is embedded.

[General Related Concepts]

Although there are strong outward similarities between JavaScript and Java, including language name, syntax, and respective standard libraries, the two are distinct languages and differ greatly in their design. JavaScript was influenced by programming languages such as Self and Scheme."

Prototype-based programming is a style of object-oriented programming in which behaviour reuse (known as inheritance) is performed via a process of reusing existing objects via delegation that serve as prototypes.[4]

In computer science, a programming language is said to have first-class functions if it treats functions as first-class citizens. Specifically, this means the language supports passing functions as arguments to other functions, returning them as the values from other functions, and assigning them to variables or storing them in data structures.[1]

In computer science, a literal is a notation for representing a fixed value in source code. [9]

[Patterns]
https://intrepidis.blogspot.co.uk/2013/04/javascript-folding-pattern.html
http://metaduck.com/08-module-pattern-inheritance.html

[Classes]
https://stackoverflow.com/questions/1595611/how-to-properly-create-a-custom-object-in-javascript

[Things to be Aware Of]
- Unobtrusive_JavaScript

[Functions]
Function Expression: var abc = function() { ... }
Function Declaration/Statement: function abc() { ... }
Function Constructor: new Function ([arg1[, arg2[, ...argN]],] functionBody)
Anonymous Function: function(a, b){return a+b;}
Anonymous Function Assigned to Variable (Function Literal): var abc = function(a, b){return a+b;} [7]
Self Executing Anonymous Function: (function() { alert('Hello World'); })();

	Get Syntax: Binds an object property to a function that will be called when that property is looked up. [13] [16]
		- As property of object. [13]
		- Using Object.defineProperty(), to append a getter to an existing object later at any time, . [13]
		- __defineGetter__() - (DEPRECATED) [15]

	Set Syntax: binds an object property to a function to be called when there is an attempt to set that property. [14]	
	
	Native Function Properties:
		- .arguments [19], .caller, .length, .name, .displayName, .prototype
	Native Function Methods:
		- .apply [12], .bind, .call [11], .toSource, .toString, .isGenerator

	Arrow Functions [17]: 
		- Are shorter, and always anonymous.
		- Best suited for non-method functions and they can not be used as constructors (new keyword).
		- "this" is lexical (strict mode rules with regard to this are ignored).
		- Two Types of Syntax:
			- var func = x => x * x;                  // concise syntax, implied "return"
			- var func = (x, y) => { return x + y; }; // with block body, explicit "return" needed
	
	Rest Parameters:
		- Allow indefinite number of arguments to a function. [18]
		-
		
	Function Notes:
		- In JavaScript every function is actually a Function object. [5]
		- Function Constructor (new keyword) is least efficient method of using/creating functions. [5]
		- Functions created with the New keyword do not form a closure. [6]
		- Function declarations are more desireable because they're declared at compile time and can be used anytime in the scope due to hoisting. [8]
		- Global function methods can be created/added using Function.prototype. (Example: Function.prototype.construct = function(args){};) [12]
		- Function parameters default to undefined. [20]

[Global Functions]
Infinity
	- Infinity is a numeric value that represents positive infinity.
	- -Infinity is a numeric value that represents negative infinity.
	- Infinity is displayed when a number exceeds the upper limit of the floating point numbers, which is 1.797693134862315E+308.
	- -Infinity is displayed when a number exceeds the lower limit of the floating point numbers, which is -1.797693134862316E+308
		
[Gotchas]
JavaScript only hoists declarations, not initializations or expressions.

[Questions]
"Invoking the Function constructor as a function (without using the new operator) has the same effect as invoking it as a constructor." [5]


[References]
1. https://en.wikipedia.org/wiki/First-class_function
2. https://en.wikipedia.org/wiki/JavaScript
3. https://en.wikipedia.org/wiki/Anonymous_function
4. https://en.wikipedia.org/wiki/Prototype-based_programming
5. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function
6. http://www.bennadel.com/blog/1909-javascript-function-constructor-does-not-create-a-closure.htm
7. https://stackoverflow.com/questions/12314905/exact-meaning-of-function-literal-in-javascript
8. https://stackoverflow.com/questions/336859/javascript-function-declaration-syntax-var-fn-function-vs-function-fn
9. https://en.wikipedia.org/wiki/Literal_(computer_programming)
10. https://en.wikipedia.org/wiki/Unobtrusive_JavaScript
11. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call
12. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply
13. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get
14. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set
15. https://stackoverflow.com/questions/812961/javascript-getters-and-setters-for-dummies
16. http://javascriptplayground.com/blog/2013/12/es5-getters-setters/
17. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions
18. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters
19. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments
20. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters